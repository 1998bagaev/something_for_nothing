@Override
public void run(String[] args) {
			this.setArgs(args);
			if (args.length != 0) {
				this.run();
				// display GUI
				if (this.jsapActualArgs.getBoolean("gui")) {
					new SpoonModelTree(getFactory());
				}
			} else {
				this.printUsage();
			}
		}
	

		public void setArgs(String[] args2) {
			this.commandLineArgs = args2;
			if (processed) {
				throw new SpoonException("You cannot process twice the same launcher instance.");
			}
			processed = true;
	

			processArguments();
		}
	

		public void printUsage() {
			this.commandLineArgs = new String[] { "--help" };
			processArguments();
		}
	

		static {
			jsapSpec = defineArgs();
		}
			/**
		 * Creates a {@link Launcher} using the {@link Factory} returned by {@link #createFactory()}.
		 */
		public Launcher() {
			factory = createFactory();
			processArguments();
		}

		/**
		 * Creates a {@link Launcher} with {@link Factory} {@code pFactory}.
		 *
		 * @param pFactory
		 * 		The {@link Factory} that will be utilized in {@link #buildMod-el()}.
		 * @throws IllegalArgumentException
		 * 		If {@code pFactory == null}.
		 */
		public Launcher(final Factory pFactory) {
			if (pFactory == null) {
				throw new IllegalArgumentException("unable to create launcher with null factory");
			}
			factory = pFactory;
			processArguments();
		}
			@Override
		public void addInputResource(String path) {
			File file = new File(path);
			if (file.isDirectory()) {
				addInputResource(new FileSystemFolder(file));
			} else {
				addInputResource(new FileSystemFile(file));
			}
		}
 

